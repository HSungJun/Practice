저장장치
 
RAM - 휘발성 메모리
HDD(SSD) - 비휘발성 메모리 (반영구적 기억장치) / (자기 디스크)자성이용 

메모장등에 dat파일로 1차원적 저장. > 보안 취약, 비효율적 및 성능저하 등의 원인, 데이터손실등으로 인한 프로그램 오류의 원인 가능성 多 

데이터 기록 최초방식
1. 파일 입출력 ( 보안, 성능 안정성 떨어짐.)

2. DBMS 등장 = ( Oracle , MSSQL, MySQL ) 
DataaBase Management System - 데이터베이스 파일을 관리하는 시스템, 데이터에 대하여 보안성 뛰어난 접근성, 안전성을 제공한다
> oracle, mysql, mssql mariadb,mongodb... 

Run SQL Command Line > SQL Plus-  DBMS자체 파일
SQL Plus - Oracl DBMS를 사용할 수 있게 지원하는 CLI 기반의 도구
CLI- Command Line Interfaece (Text 환경의 사용자 도구)

sqldeveloper는 jdk 와 Orcle이 설치되어있어야 함 - Oracle을 편하게 사용하도록 돕는 GUI 기반의 도구 (툴 킷)
GUI - Graphic User Interface (그래픽환경의 사용자 도구)



DBMS는 - CRUD 사용 목적
system 계정은 최고관리자 -CRUD작업은 하지 않고 환경설정 및 높은 권한작업

DBMS는 계정별로 권한 및 영역이 나눠진다.
개인영역 내부에는 데이터 보관. 데이터 보관용 단위 = Table (표) / 동일한 목적을 가진 데이터들의 집합 

행row  / header row - 최상위 행으로서 저장될 데이터의 타이틀
열column 


-- DBMS 데이터 CRUD 방식 : SQL       (-- == 주석)
-- SQL - Structured Query Language (구조화된 질의 언어 (요청))
-- Oracle, MySQL, MSSQl - CRUD 수행
--table = 객체로 볼 수 있음

--SQL

--DDL (Data Definition Language)    : 명령어에 대한 카테고리 - DBMS상에 객체를 생성, 수정, 삭제, 조회하는 명령집합
--                                  create / drop / alter
--DML (Data Manipulation Language)  : DBMS Table에 데이터를 생성, 수정, 삭제, 조회하는 명령집합
--                                  insert / update / delete / select
--    DQL (Data Query Language) - select - 조회

--DCL (Data Control Language)       : DBMS 계정에 권한을 통제하는 명령
--                                  grant / revoke
--TCL (Transaction Control Language): Trasaction 통제 명령 집합
--                                  commit / rollback / savepoint

--          id               pw
create user kh identified by kh;
grant connect, resource to kh;


desc employee;
describe employee : employee테이블에 대해 묘사(설명) 하라. 

select emp_id, emp_name from employee;
employee 테이블에서 emp_id, emp_name, emp_no 컬럼에 해당하는 데이터를 조회하라.

select * from employee;
employee 테이블의 모든 컬럼 데이터를 조회하라

select * from Employee where emp_id = 207
employee 테이블의 모든 컬럼 데이터에서 where(검색기능) id값이 207인 직원의 정보 출력

select emp_id,emp_name from Employee where emp_id = 207;
employee 테이블에서 id값이 207인 데이터중  emp_id, emp_name, emp_no만 출력

오라클에서의 문자열 비교는 = 사용하며 문자열은 ' ' 사용하여 표기.


employee 테이블에 존재하는 모든 직원의 사번, 이름, 급여를 출력
select emp_id,emp_name,salary from employee;


employee 테이블에서 직원중 D9 부서에 속해있는 직원들의 사번, 이름, 부서코드 출력
select emp_id,emp_name,dept_code from Employee where dept_code = 'D9';

employee 테이블에서 job 의 정보 출력
select * from job;

employee 테이블에서 salary가 400만 이하인 데이터 출력
select * from employee where salary >= 4000000;

employee 테이블에서 salary 가 200만 이하인 데이터중 emp_name, dept_code, job_code 만 출력
select emp_name, dept_code, job_code from employee where salary <=2000000;

-------------------------------------------------------------------------------------------------------------------------
줄바꿈 가능

and의 경우 둘다 참일경우 출력.
select * from employee where dept_code = 'D6' and Salary <= 3000000;
D6부서에 300만원 이하 직원 검색. 

or 의 경우 둘중의 하나의 조건만 만족시 출력.
select * from employee where dept_code = 'D6' or Salary <= 3000000;

-------------------------------------------------------------------------------------------------------------------------
빈데이터를 검색하기 위해서는 -- is null 사용
select emp_id, emp_name from employee
    where dept_code is null;
-------------------------------------------------------------------------------------------------------------------------
salary *12 등의 연산식, '원' 등의 리터럴값또한 삽입 가능
select emp_namem salary,salary *12 from employee

-------------------------------------------------------------------------------------------------------------------------

select 컬럼명 from 테이블명 where 조건식;
조건식 =,<,>,<=,>=, 사용가능
and, or, between and, is null, is not null, in..
컬럼명 연산식결과 및 리터럴값 출력 가능

-------------------------------------------------------------------------------------------------------------------------
컬럼명 변경 가능 - as (alias) 
select emp_name, salary, salary*12 as "연 봉", '원' 단위 from employee;
"연봉" 띄어쓰기가 있는 경우 " " 필수, 없을때는 하지않아도 상관없음.

데이터 영역에는 ' ' 사용, 헤더등의 데이터 외부 영역에는 " " 사용.
-------------------------------------------------------------------------------------------------------------------------
sysdate & dual

select 반복문
sysdate - 현재 날짜 및 시간 확인 / 날짜타입 데이터
호출되는 시점의 날짜 및 시간을 반환하는 oracle 기능
date type의 결과를 반환한다.

select sysdate from dual;
1행 1열짜리 허수아비 데이터
dual - 내장 테이블 - sql 이용자가 특정 기능을 테스트할때 사용 할 수 있도록 만들어둔 허수아비 테이블 

select 'ABC' - 10 from dual;
문자열에서 숫자계산 불가능    

select 10 - 5 from dual;
5출력    

select sysdate -1 from dual;
날짜타입에 대한 수치 연산은 (+,-) 일수 연산이 적용 > -1 = 23/02/13   /// +1 = 23/02/15

날짜타입 과 날짜 타입을 연산하면 두 날짜 사이의 일차가 반환된다.

-------------------------------------------------------------------------------------------------------------------------
floot () ; 실수를 파라미터로 전달받으면 소수점 자리수를 버림하고 정수 자리만 반환하는 메서드

날자값의 경우 크기비교 가능.

    select emp_id, emp_name, hire_date as 입사일, floor (sysdate - hire_date)||
    '일' as 근무일수 from employee;

|| ( shift + \) 사용시 Java 문자열출력에서의 + 와 같은 느낌의 연결을 위한 명령어




-------------------------------------------------------------------------------------------------------------------------quiz
employee 테이블에서 근속년수가 20년 이상 된 직원 이름, 월급, 보너스율를 출력

 select emp_name, salary, bonus from employee
        where floor((sysdate-hire_date)/365) >= 20;


-------------------------------------------------------------------------------------------------------------------------

like 구문

select * from employee where emp_name like '%연%';
like ' ' 문자열 내부에 %를 통해 있을수도있고 없을수도있다라는 의미 내포


select * from employee where emp_name like '_하_';
select * from employee where emp_name like ' 전 _ _ ';
_의 경우 문자를 의미. 전씨를 검색하는등, 가운데 특정단어검색의 이용


select * from employee where emp_name not like '%하%';
not을 통해 반대의 조건 사용 가능

-------------------------------------------------------------------------------------------------------------------------quiz

SELECT
    emp_name,
    dept_code,
    salary,
    email,
    hire_date
FROM
    employee
WHERE
       dept_code in ('D9','D6')
    AND
        salary >= 2700000
    AND
        email LIKE '%s%'
    AND
        hire_date BETWEEN '2001/01/01' AND '05/12/31';


----------------------------------------------order by
-- 쿼리 실행 결과에서 특정 조건을 이용하여 데이터를 정렬하는 문법


select emp_id, emp_name, salary from employee order by salary asc; /// ascending 오름차순 asc 생략가


select emp_id, emp_name, salary from employee order by salary desc; /// descending 내림차순

dept_code 내림차순으로 정리 후 salary 또한 내림차순으로 정렬
select emp_id, emp_name, dept_code, salary from employee order by dept_code desc, salary desc; 

--배열위치에서 null값 위치지정을 위해서는 null값이 있는 배열 asc,desc 뒤에 nulls first or nulls last 
select emp_id, emp_name, dept_code, salary from employee order by dept_code desc nulls last, salary asc; 


--컬럼의 번호를 이용하여 정렬하는 것도 가능
select emp_id, emp_name, dept_code, salary from employee order by 3 desc ,4 asc; 


select * from employee;

--1.근속년수가 5년이상 10년이하인 직원의 이름 주민번호 급여 입사일 검색
 select emp_name, emp_no , salary , hire_date from employee
    where floor((sysdate-hire_date)/365) between 5 and 10;
    
--2.재직중이 아닌 직원의 이름, 부서코드 검색 (퇴사여부 - ENT_YN)
 select emp_name, dept_code from employee
    where ent_date is not null; 
    
--3.근속년수10년이상인직원검색, 출력결과는 이름 급여 근속년수(소수점x) 근속년수 오름차순정렬
--  급여는 50%인상된 급여로 출력
 select emp_name, salary *1.5 as "급여", floor((sysdate-hire_date)/365) as "근속연수" 
    from employee
    where floor((sysdate-hire_date)/365) >=10 
    order by floor((sysdate-hire_date)/365) asc;

--4.입사일이 99/01/01~10/01/01 인 사람중 급여가 2000000원 이하인 사람의 이름 주민번호
--  이메일 폰번호 급여 검색
 select emp_name, emp_no, email, phone, salary
    from employee
    where hire_date between '99/01/01' and '10/01/01'
        and salary <= 2000000;

--5.급여가 20000000~30000000원인 여직원중 4월 생일자를 검색하여 
--  이름 주민번호 급여 부서코드를
--  주민번호 순으로(내림차순) 출력
-- ( 단, 부서코드가 null인 사람은 부서코드가 없음 으로 출력)
 select emp_name, emp_no, salary, dept_code
    from employee
    where salary between 2000000 and 3000000
    and emp_no like '_______2%' and emp_no like '___4%'
    order by emp_no desc;

--6. 남자사원중 보너스가 없는 사원의 오늘까지 근무일을 측정하여 1000일마다(소수점 제외)
--  급여의 10%보너스를 계산하여 이름, 특별보너스(계산금액) 결과를 출력하세요
--  단, 이름 순으로 오름차순 정렬하여 출력
 select emp_name, (salary*0.1)*floor(((sysdate-hire_date)/1000)) as "특별보너스"
    from employee
    where bonus is null and emp_no like '_______1%'
    order by emp_name asc;
