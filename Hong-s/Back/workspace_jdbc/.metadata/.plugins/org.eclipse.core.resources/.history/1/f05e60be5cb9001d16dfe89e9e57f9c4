package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.dbcp2.BasicDataSource;

import dto.MembersDTO;

public class MembersDAO {

	
	//DBCP - DataBase Connection Pool (DB 접속자수가 급격하게 증가할 때에 터지는 것을 방지하기 위한 것)
	// Database Connection 객체의 사용량이 폭발적으로 증가할 시 ,
	// Databasee가 서비스중단되지 않도록 충격을 완화하는 완충장치
	// 정해진 Connection객체를 대여 / 반환하는 시스템으로 운용하며 안전성을 도모하지만
	// 접속자가 많을 시 상대적으로 기다리는 시간이 늘어날 수 있어 적절한 수요 배치가 필요함.	
	
	BasicDataSource bds = new BasicDataSource();
	
private Connection getConnection () throws Exception {
		
		bds.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
		bds.setUsername("kh");
		bds.setPassword("kh");
		bds.setInitialSize(10); // Connection pool 개수 설정 명령어
		return bds.getConnection();
		
	}
	// library간 의존성 (Depedencies)




//	private Connection getConnection() throws Exception {
//		String url = "jdbc:oracle:thin:@localhost:1521:xe";
//		String dbID = "kh";
//		String dbPW = "kh";
//		Connection con = DriverManager.getConnection(url, dbID, dbPW);
//		return con;
//	}

	public int insert(MembersDTO dto) throws Exception {

		// 일반 Statement 를 사용하는 경우
		// String sql = "insert into members
		// values('"+dto.getId()+"','"+dto.getPw()+"','"+dto.getName()+"','"+dto.getContact()+"',default)";
		// try(Connection con = this.getConnection();
		// Statement stat = con.createStatement();){
		// int result = stat.executeUpdate(sql);
		// con.commit();
		// return result;
		// }

		// PreparedStatement 를 사용하는 경우
		String sql = "insert into members values(?, ?, ?, ?, default)";
		try (Connection con = this.getConnection(); PreparedStatement pstat = con.prepareStatement(sql)) {
			pstat.setString(1, dto.getId());
			pstat.setString(2, dto.getPw());
			pstat.setString(3, dto.getName());
			pstat.setString(4, dto.getContact());

			int result = pstat.executeUpdate();
			con.commit();
			return result;
		}

	}

	public boolean isLoginOK(String id, String pw) throws Exception {
		String sql = "select * from members where id = ? and pw = ?";
		try (Connection con = this.getConnection(); PreparedStatement stat = con.prepareStatement(sql)) {
			stat.setString(1, id);
			stat.setString(2, pw);
			ResultSet rs = stat.executeQuery();
			return rs.next();
		}
	}

	public boolean idOverlapCheck (String id) throws Exception{
		String sql = "select id from members where id =  ?  ";
		try(Connection con = this.getConnection();
				PreparedStatement stat = con.prepareStatement(sql)){
			stat.setString(1, id);
			ResultSet rs = stat.executeQuery();

			while(rs.next()) {
				String searchId = rs.getString("id");
				if (searchId.equals(id)) {
					return true;
				}
			}
			return false;
		}
	}

	public boolean isIdExist (String id) throws Exception{
		
		String sql = "select * from members where id = ? ";
		
		ResultSet rs = null;
		try(Connection con = this.getConnection();
		PreparedStatement stat = con.prepareStatement(sql)){
		stat.setString(1, id);
		rs = stat.executeQuery();
		return rs.next();
		}finally {
			if(rs!=null)rs.close();
		
		}
	}

	public List<MembersDTO> selectAll () throws Exception {
		String sql = "select * from members";
		try (Connection con = this.getConnection(); 
				PreparedStatement stat = con.prepareStatement(sql)) {
			ResultSet rs = stat.executeQuery();
			
			List<MembersDTO> list = new ArrayList<>();
			while(rs.next()) {
				String id = rs.getString("id");
				String pw = rs.getString("pw");
				String name = rs.getString("name");
				String contact = rs.getString("contact");
				Timestamp reg_date = rs.getTimestamp("reg_date");
				
				MembersDTO dto = new MembersDTO(id,pw,name,contact,reg_date);
				list.add(dto);
			}
				return list;
		}
	}

}
